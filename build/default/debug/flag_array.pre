
# 1 "flag_array.c"

# 4 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\__size_t.h"
typedef unsigned size_t;

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\stdarg.h"
typedef void * va_list[1];

#pragma intrinsic(__va_start)
extern void * __va_start(void);

#pragma intrinsic(__va_arg)
extern void * __va_arg(void *, ...);

# 43 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\stdio.h"
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 29 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\errno.h"
extern int errno;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\conio.h"
extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern __bit kbhit(void);

# 23
extern char * cgets(char *);
extern void cputs(const char *);

# 88 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);


# 180
#pragma printf_check(vprintf) const
#pragma printf_check(vsprintf) const

extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 7 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\stdlib.h"
typedef unsigned short wchar_t;

# 15
typedef struct {
int rem;
int quot;
} div_t;
typedef struct {
unsigned rem;
unsigned quot;
} udiv_t;
typedef struct {
long quot;
long rem;
} ldiv_t;
typedef struct {
unsigned long quot;
unsigned long rem;
} uldiv_t;

# 53
extern double atof(const char *);
extern double strtod(const char *, const char **);
extern int atoi(const char *);
extern unsigned xtoi(const char *);
extern long atol(const char *);
extern long strtol(const char *, char **, int);

extern int rand(void);
extern void srand(unsigned int);
extern void * calloc(size_t, size_t);
extern div_t div(int numer, int denom);
extern udiv_t udiv(unsigned numer, unsigned denom);
extern ldiv_t ldiv(long numer, long denom);
extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
extern unsigned long _lrotl(unsigned long value, unsigned int shift);
extern unsigned long _lrotr(unsigned long value, unsigned int shift);
extern unsigned int _rotl(unsigned int value, unsigned int shift);
extern unsigned int _rotr(unsigned int value, unsigned int shift);




extern void * malloc(size_t);
extern void free(void *);
extern void * realloc(void *, size_t);


# 13 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\xc8debug.h"
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 86 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\stdlib.h"
extern int atexit(void (*)(void));
extern char * getenv(const char *);
extern char ** environ;
extern int system(char *);
extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
extern int abs(int);
extern long labs(long);

extern char * itoa(char * buf, int val, int base);
extern char * utoa(char * buf, unsigned val, int base);




extern char * ltoa(char * buf, long val, int base);
extern char * ultoa(char * buf, unsigned long val, int base);

extern char * ftoa(float f, int * status);

# 17 "byte_union.h"
typedef union{
unsigned char byte;
struct{
unsigned b0:1, b1:1, b2:1, b3:1, b4:1, b5:1, b6:1, b7:1;
};
}byte_union_t;

unsigned char byte_union_get_bit_value(const byte_union_t *byte_u,unsigned char bit_nbr);

unsigned char *byte_union_get_byte(byte_union_t *byte_u);

const unsigned char *byte_union_get_byte_info(const byte_union_t *byte_u);

void byte_union_set_byte(byte_union_t *byte_u,unsigned char val);

void byte_union_set_bit(byte_union_t *byte_u, unsigned char state,unsigned char bit_nbr);

void byte_union_initialize(byte_union_t *byte_u);

# 18 "flag_array.h"
typedef struct{
byte_union_t flags;
unsigned char flags_number;
}flag_array_t;

void flag_array_set_flag(flag_array_t *flag_array,unsigned char state,unsigned char name);

unsigned char flag_array_get_flag_state(const flag_array_t *flag_array,unsigned char name);

void flag_array_initialise(flag_array_t *flag_array);

int flag_array_valid(const flag_array_t *flag_array);

void flag_array_set_numbers(flag_array_t *flag_array,unsigned char nbr);

# 18 "C:\Program Files (x86)\Microchip\xc8\v1.36\include\assert.h"
extern void _fassert(int, const char *, const char *);


# 24
#pragma intrinsic(__builtin_software_breakpoint)
extern void __builtin_software_breakpoint(void);

# 6 "flag_array.c"
int flag_array_valid(const flag_array_t *flag_array)
{
if(!(flag_array!=(0))) {_fassert(8, "flag_array.c", "flag_array!=(0)");};
if(flag_array->flags_number>8)
return 0;
return 1;
}

void flag_array_set_flag(flag_array_t *flag_array,unsigned char state,unsigned char name)
{

if(!(flag_array!=(0))) {_fassert(17, "flag_array.c", "flag_array!=(0)");};
if(!(flag_array_valid(flag_array))) {_fassert(18, "flag_array.c", "flag_array_valid(flag_array)");};
if(!(state==0 || state==1)) {_fassert(19, "flag_array.c", "state==0 || state==1");};
if(!(name<flag_array->flags_number)) {_fassert(20, "flag_array.c", "name<flag_array->flags_number");};

byte_union_set_bit(&flag_array->flags,state,name);

if(!(flag_array_valid(flag_array))) {_fassert(24, "flag_array.c", "flag_array_valid(flag_array)");};

}

void flag_array_initialise(flag_array_t *flag_array)
{

if(!(flag_array!=(0))) {_fassert(31, "flag_array.c", "flag_array!=(0)");};

byte_union_initialize(&flag_array->flags);
flag_array->flags_number=0;

if(!(flag_array_valid(flag_array)==1)) {_fassert(36, "flag_array.c", "flag_array_valid(flag_array)==1");};

}

void flag_array_set_numbers(flag_array_t *flag_array,unsigned char nbr)
{

if(!(flag_array!=(0))) {_fassert(43, "flag_array.c", "flag_array!=(0)");};
if(!(nbr<=8)) {_fassert(44, "flag_array.c", "nbr<=8");};

flag_array->flags_number=nbr;

if(!(flag_array_valid(flag_array)==1)) {_fassert(48, "flag_array.c", "flag_array_valid(flag_array)==1");};

}

unsigned char flag_array_get_flag_state(const flag_array_t *flag_array,unsigned char name)
{

if(!(flag_array!=(0))) {_fassert(55, "flag_array.c", "flag_array!=(0)");};
if(!(flag_array_valid(flag_array)==1)) {_fassert(56, "flag_array.c", "flag_array_valid(flag_array)==1");};
if(!(name<flag_array->flags_number)) {_fassert(57, "flag_array.c", "name<flag_array->flags_number");};

unsigned char val=byte_union_get_bit_value(&flag_array->flags,name);

if(!(val==0 || val==1)) {_fassert(61, "flag_array.c", "val==0 || val==1");};

return val;
}
